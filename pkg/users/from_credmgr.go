//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation
// Code generated by @autorest/go. DO NOT EDIT.

package users

import "time"

// CredentialRequirementsClassification provides polymorphic access to related types.
// Call the interface's GetCredentialRequirements() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *CredentialRequirements, *EncryptionKeyRequirements, *PasswordRequirements
type CredentialRequirementsClassification interface {
	// GetCredentialRequirements returns the CredentialRequirements content of the underlying type.
	GetCredentialRequirements() *CredentialRequirements
}
// CredentialRequirementsCredentialType - Identifies the type of credential.
type CredentialRequirementsCredentialType string

const (
	CredentialRequirementsCredentialTypeKEY      CredentialRequirementsCredentialType = "KEY"
	CredentialRequirementsCredentialTypePASSWORD CredentialRequirementsCredentialType = "PASSWORD"
)

// PossibleCredentialRequirementsCredentialTypeValues returns the possible values for the CredentialRequirementsCredentialType const type.
func PossibleCredentialRequirementsCredentialTypeValues() []CredentialRequirementsCredentialType {
	return []CredentialRequirementsCredentialType{
		CredentialRequirementsCredentialTypeKEY,
		CredentialRequirementsCredentialTypePASSWORD,
	}
}

type CredentialRequirements struct {
	// REQUIRED; Identifies the type of credential.
	CredentialType *CredentialRequirementsCredentialType
}

// GetCredentialRequirements implements the CredentialRequirementsClassification interface for type CredentialRequirements.
func (c *CredentialRequirements) GetCredentialRequirements() *CredentialRequirements { return c }

// EncryptionKeyRequirements - Requirements for KEY credential types.
type EncryptionKeyRequirements struct {
	// REQUIRED; Identifies the type of credential.
	CredentialType *CredentialRequirementsCredentialType

	// REQUIRED; The size of generated keys.
	KeySize *int32
}

// GetCredentialRequirements implements the CredentialRequirementsClassification interface for type EncryptionKeyRequirements.
func (e *EncryptionKeyRequirements) GetCredentialRequirements() *CredentialRequirements {
	return &CredentialRequirements{
		CredentialType: e.CredentialType,
	}
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

type ManagedCredential struct {
	Properties *ManagedCredentialProperties
	Status     *ManagedCredentialStatus

	// READ-ONLY; Nexus cluster/resource to which credential secrets will be delivered as part of credential rotation.
	ResourceID *string

	// READ-ONLY; Name of the k8s secret in the cluster where updated credentials will be delivered.
	SecretName *string

	// READ-ONLY; Namespace of the k8s secret in the cluster where updated credentials will be delivered.
	SecretNamespace *string

	// READ-ONLY; The tenant ID used for authentication to the managed credential resource
	TenantID *string
}

type ManagedCredentialProperties struct {
	CredentialRequirements CredentialRequirementsClassification

	// Indicates the time period in days for which a rotated credential is valid.
	ExpireDuration *int32

	// Indicates the time period in days between credential rotations for the resource. If not set, no automatic credential rotation
	// will not occur
	RotationDuration *int32

	// The data key within the k8s secret where an updated credential will be stored for delivery.
	SecretDataKey *string
}

type ManagedCredentialStatus struct {
	// READ-ONLY; Indicates the last time a rotation was performed for the managed credential.
	LastRotationTime *time.Time

	// READ-ONLY; Optional customer key vault resource ID associated to cluster where last rotated credential was attempted to
	// be stored.
	SecretArchive *string

	// READ-ONLY; Indicates whether rotated credential was successfully stored in customer key vault. If blank, no customer key
	// vault was provided or enabled.
	SecretArchiveSuccessful *bool
}

// PasswordRequirements - Requirements for PASSWORD credential types.
type PasswordRequirements struct {
	// REQUIRED; Identifies the type of credential.
	CredentialType *CredentialRequirementsCredentialType

	// REQUIRED; The length of generated passwords.
	MinLength *int32

	// The minimum number of numeric characters in a generated credential password.
	MinNumeric *int32

	// The minimum number of special characters in a generated credential password.
	MinSpecialChar *int32

	// The minimum number of upper-case characters in a generated credential password.
	MinUpperCase *int32

	// Valid list of special characters to be used when generating a password. Required if minSpecialChar > 0.
	SpecialCharList *string
}

// GetCredentialRequirements implements the CredentialRequirementsClassification interface for type PasswordRequirements.
func (p *PasswordRequirements) GetCredentialRequirements() *CredentialRequirements {
	return &CredentialRequirements{
		CredentialType: p.CredentialType,
	}
}
